# Based on https://medium.com/flutter-community/automating-publishing-your-flutter-apps-to-google-play-using-github-actions-2f67ac582032

on:
  workflow_call:

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Xmx8g
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "17.x"
      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android
          key: android-sdk-${{ runner.os }}-${{ hashFiles('android/app/build.gradle') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: false

      - name: Install Fastlane dependencies
        working-directory: android
        run: |
          gem install bundler -v 2.4.22
          bundle config path vendor/bundle
          bundle install

      - name: Create keystore file from secret
        working-directory: android/app
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" > keystore.b64
          base64 -d keystore.b64 > keystore.jks
          rm keystore.b64

      - name: Create key.properties file from secret
        working-directory: android
        run: |
          echo "${{ secrets.KEY_PROPERTIES }}" > key.properties

      - name: Verify keystore access
        working-directory: android
        run: |
          # Extract values from key.properties
          STORE_FILE=app/$(grep storeFile key.properties | cut -d'=' -f2)
          STORE_PASSWORD=$(grep storePassword key.properties | cut -d'=' -f2)
          KEY_ALIAS=$(grep keyAlias key.properties | cut -d'=' -f2)
          KEY_PASSWORD=$(grep keyPassword key.properties | cut -d'=' -f2)
          
          echo "Testing keystore access..."
          echo "Store file: $STORE_FILE"
          echo "Key alias: $KEY_ALIAS"
          
          # Verify keystore can be opened and key accessed
          keytool -list -alias "$KEY_ALIAS" -keystore "$STORE_FILE" -storepass "$STORE_PASSWORD" -keypass "$KEY_PASSWORD" -v

      - name: Create Google Play service account file
        working-directory: android
        run: |
          cat > fastlane-secret.json << 'EOF'
          ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          EOF

      - name: Testing Fastlane installation
        working-directory: android
        run: |
          bundle update fastlane
          bundle exec fastlane run validate_play_store_json_key json_key:fastlane-secret.json

      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: latest
          cache: true
      - run: flutter --version
      - run: flutter pub get

      - name: Update version with build number
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          NEW_VERSION="${CURRENT_VERSION}+${{ github.run_number }}"
          sed -i "s/^version: .*/version: ${NEW_VERSION}/" pubspec.yaml

          echo "Updated version from ${CURRENT_VERSION} to ${NEW_VERSION}"
      - run: flutter build appbundle --flavor production
      - run: flutter build apk --flavor production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-bundle
          path: |
            build/app/outputs/bundle/productionRelease/app-production-release.aab
            build/app/outputs/flutter-apk/app-production-release.apk

      - name: Deploy to Google Play Beta
        if: github.event_name == 'push'
        run: |
          cd android
          bundle exec fastlane beta

      - name: Deploy to Google Play Production
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          cd android
          bundle exec fastlane production_appbundle
